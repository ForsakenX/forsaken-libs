Synopsis:

	Builds all required dependencies for compiling Forsaken (http://fly.thruhere.net).

Description:

	You can of course choose to use your distributions package manager instead as long as
	it properly manages pkgconfig for each of the packages.  Although over time we've seen
	each distribution build things in their own way, missing static libraries, sloppy
	pkgconfigs, missing options etc..

	These scripts are also required to build for mac osx and another folder similar to this
	one has precompiled libraires for win32 allowing cross/native compilation using mingw
	(will be merged with this project soon).

	Hence these helper scripts give us a baseline that allows us to easily compile all
	required depencies from scratch for any target system.


Contact:

	fskn.methods@gmail.com


Note:

	If you want multiple of these folders to be used at same time.  For example you might
	want unix32 and unix64 folders for building each type.  Then simply update prefix=
	with the new path in the .pc files:

		sed -i "s/prefix=.*/prefix=$new_path/g" lib/pkgconfig/* src/pkgconfig/*


Scripts:

	./src/build.sh              = build everything.
	./src/32bit-build.sh        = build everything with -m32.
	./src/SDL-2.0.build.latest  = clone latest SDL from HG repo and build.
	./src/clean.sh              = run `make clean` everywhere.
	./reset.sh                  = reset this folder back to clean state.
	./pkgconfig.sh              = run pkgconfig pointing to this folder for testing.
	./make.sh                   = run make on Forsaken with PKG_CONFIG_PATH set properly.
	./run.sh                    = run Forsaken with {LD,DYLD}_LIBRARY_PATH set properly.


Running Forsaken:

	The convention is to place this folder in forsaken/src and run:

		./unix/make.sh && ./unix/run.sh

	Generally you end up writing a custom wrapper script around this.

	See the Forsaken Makefile for information on various build options you can pass.

	Note that run.sh uses gdb.


Building 32bit on ubuntu 64bit:

	./ubuntu64-ia32-pkgs.sh = install required packages to compile 32bit on 64bit ubuntu.
	./ubuntu64-ia32-make.sh = compile 32bit forsaken on 64bit ubuntu

	Do to a pending issue you must remove remove unix/lib/libSDL* and -lSDLmain from
	unix/lib/pkgconfig/sdl.pc

	Ubuntu doesn't really support building 32bit and 64bit same time since attempting to
	install 32bit packages will replace the 64bit packages and vice versa.  The scripts
	above get around this by doing a few non standard symlinks.


MAC OSX:

	Normally on linux one would just run with LD_LIBRARY_PATH set and it will all work.

	Although on osx DYLD_LIBRARY_PATH cannot be set properly do to following error:

		Symbol not found: __cg_png_create_info_struct
		Referenced from: /System/Library/Frameworks/ApplicationServices.framework/
			Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO
		Expected in: $unix/lib/libpng14.14.dylib

	Also osx seems to require absolute paths to be set in the binary ?

	Hence make sure dylib paths are all correct:

		dyldinfo -dylibs ./projectx

	This can usually be achieved by the command below.  Although note that the binaries
	will break if you move your unix folder to another path in the file system.  In which
	case you may want to copy/set prebuilt versions to a stable location (such as /lib).

		./unix/make.sh

		lib="$PWD/unix/lib"

		dyldinfo -dylibs ./projectx |
		grep dylib |
		while read -r path; do
			[[ -f "$lib/${path/*\/}" ]] &&
			install_name_tool -change "$path" "$lib/${path/*\/}" ./projectx
		done

		./unix/run.sh

